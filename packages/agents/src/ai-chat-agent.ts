import type {
  Message as ChatMessage,
  StreamTextOnFinishCallback,
  ToolSet
} from "ai";
import { appendResponseMessages } from "ai";
import { DOQB } from "workers-qb";
import { Agent, type AgentContext, type Connection, type WSMessage } from "./";
import type {
  AIChatAgentMessage,
  IncomingMessage,
  OutgoingMessage
} from "./ai-types";

const decoder = new TextDecoder();

/**
 * Extension of Agent with built-in chat capabilities
 * @template Env Environment type containing bindings
 */
export class AIChatAgent<Env = unknown, State = unknown> extends Agent<
  Env,
  State
> {
  /**
   * Map of message `id`s to `AbortController`s
   * useful to propagate request cancellation signals for any external calls made by the agent
   */
  private _chatMessageAbortControllers: Map<string, AbortController>;
  /** Array of chat messages for the current conversation */
  messages: ChatMessage[];

  #qb: DOQB;

  constructor(ctx: AgentContext, env: Env) {
    super(ctx, env);

    this.#qb = new DOQB(this.ctx.storage.sql);

    const allMessages = this.#qb
      .fetchAll<AIChatAgentMessage>({
        tableName: "cf_ai_chat_agent_messages"
      })
      .execute();

    this.messages = (allMessages.results || []).map((row) => {
      return JSON.parse(row.message as string);
    });

    this._chatMessageAbortControllers = new Map();
  }

  private _broadcastChatMessage(message: OutgoingMessage, exclude?: string[]) {
    this.broadcast(JSON.stringify(message), exclude);
  }

  override async onMessage(connection: Connection, message: WSMessage) {
    if (typeof message === "string") {
      let data: IncomingMessage;
      try {
        data = JSON.parse(message) as IncomingMessage;
      } catch (_error) {
        // silently ignore invalid messages for now
        // TODO: log errors with log levels
        return;
      }
      if (
        data.type === "cf_agent_use_chat_request" &&
        data.init.method === "POST"
      ) {
        const {
          // method,
          // keepalive,
          // headers,
          body // we're reading this
          //
          // // these might not exist?
          // dispatcher,
          // duplex
        } = data.init;
        const { messages: incomingMessages } = JSON.parse(body as string);
        const messages = [...this.messages, ...incomingMessages];
        this._broadcastChatMessage(
          {
            messages,
            type: "cf_agent_chat_messages"
          },
          [connection.id]
        );

        await this.persistMessages(incomingMessages, [connection.id]);

        this.observability?.emit(
          {
            displayMessage: "Chat message request",
            id: data.id,
            payload: {
              message: incomingMessages
            },
            timestamp: Date.now(),
            type: "message:request"
          },
          this.ctx
        );

        const chatMessageId = data.id;
        const abortSignal = this._getAbortSignal(chatMessageId);

        return this._tryCatchChat(async () => {
          const response = await this.onChatMessage(
            async ({ response }) => {
              const finalMessages = appendResponseMessages({
                messages,
                responseMessages: response.messages
              });

              const outgoingMessages =
                this._messagesNotAlreadyInAgent(finalMessages);
              await this.persistMessages(finalMessages, [connection.id]);
              this._removeAbortController(chatMessageId);

              this.observability?.emit(
                {
                  displayMessage: "Chat message response",
                  id: data.id,
                  payload: {
                    message: outgoingMessages
                  },
                  timestamp: Date.now(),
                  type: "message:response"
                },
                this.ctx
              );
            },
            abortSignal ? { abortSignal } : undefined
          );

          if (response) {
            await this._reply(data.id, response);
          } else {
            // Log a warning for observability
            console.warn(
              `[AIChatAgent] onChatMessage returned no response for chatMessageId: ${chatMessageId}`
            );
            // Send a fallback message to the client
            this._broadcastChatMessage(
              {
                body: "No response was generated by the agent.",
                done: true,
                id: data.id,
                type: "cf_agent_use_chat_response"
              },
              [connection.id]
            );
          }
        });
      }
      if (data.type === "cf_agent_chat_clear") {
        this._destroyAbortControllers();
        this.#qb
          .delete({
            tableName: "cf_ai_chat_agent_messages",
            where: { conditions: "1=1" }
          })
          .execute();
        this.messages = [];
        this._broadcastChatMessage(
          {
            type: "cf_agent_chat_clear"
          },
          [connection.id]
        );
      } else if (data.type === "cf_agent_chat_messages") {
        // replace the messages with the new ones
        this.#qb
          .delete({
            tableName: "cf_ai_chat_agent_messages",
            where: { conditions: "1=1" }
          })
          .execute();
        this.messages = data.messages; // Set directly since we're replacing everything

        // Persist all messages to DB
        for (const message of data.messages) {
          this
            .sql`insert into cf_ai_chat_agent_messages (id, message) values (${
            message.id
          },${JSON.stringify(message)})`;
        }

        // Broadcast the new message set
        this._broadcastChatMessage(
          {
            messages: this.messages,
            type: "cf_agent_chat_messages"
          },
          [connection.id]
        );
      } else if (data.type === "cf_agent_chat_request_cancel") {
        // propagate an abort signal for the associated request
        this._cancelChatRequest(data.id);
      }
    }
  }

  override async onRequest(request: Request): Promise<Response> {
    return this._tryCatchChat(() => {
      const url = new URL(request.url);
      if (url.pathname.endsWith("/get-messages")) {
        const messages = this.#qb
          .select("*")
          .tableName("cf_ai_chat_agent_messages")
          .execute()
          .results?.map((row) => {
            return JSON.parse(row.message as string);
          }) as ChatMessage[];
        return Response.json(messages);
      }
      return super.onRequest(request);
    });
  }

  private async _tryCatchChat<T>(fn: () => T | Promise<T>) {
    try {
      return await fn();
    } catch (e) {
      throw this.onError(e);
    }
  }

  /**
   * Handle incoming chat messages and generate a response
   * @param onFinish Callback to be called when the response is finished
   * @param options.signal A signal to pass to any child requests which can be used to cancel them
   * @returns Response to send to the client or undefined
   */
  async onChatMessage(
    // biome-ignore lint/correctness/noUnusedFunctionParameters: overridden later
    onFinish: StreamTextOnFinishCallback<ToolSet>,
    // biome-ignore lint/correctness/noUnusedFunctionParameters: overridden later
    options?: { abortSignal: AbortSignal | undefined }
  ): Promise<Response | undefined> {
    throw new Error(
      "recieved a chat message, override onChatMessage and return a Response to send to the client"
    );
  }

  /**
   * Save messages on the server side and trigger AI response
   * @param messages Chat messages to save
   */
  async saveMessages(messages: ChatMessage[]) {
    await this.persistMessages(messages);
    const response = await this.onChatMessage(async ({ response }) => {
      const finalMessages = appendResponseMessages({
        messages: this.messages, // Use current state instead of input messages
        responseMessages: response.messages
      });

      // Only persist the new response messages (filter out existing ones)
      const newResponseMessages =
        this._messagesNotAlreadyInAgent(finalMessages);
      await this.persistMessages(newResponseMessages, []);
    });
    if (response) {
      // we're just going to drain the body
      // @ts-ignore TODO: fix this type error
      for await (const chunk of response.body!) {
        decoder.decode(chunk);
      }
      response.body?.cancel();
    }
  }

  async persistMessages(
    messages: ChatMessage[],
    excludeBroadcastIds: string[] = []
  ) {
    for (const message of messages) {
      this
        .sql`insert or replace into cf_ai_chat_agent_messages (id, message) values (${
        message.id
      },${JSON.stringify(message)})`;
    }

    // Update in-memory messages by merging new messages
    const existingIds = new Set(this.messages.map((m) => m.id));
    const newMessages = messages.filter((m) => !existingIds.has(m.id));
    this.messages = [...this.messages, ...newMessages];

    this._broadcastChatMessage(
      {
        messages: this.messages, // Broadcast all messages, not just the new ones
        type: "cf_agent_chat_messages"
      },
      excludeBroadcastIds
    );
  }

  private _messagesNotAlreadyInAgent(messages: ChatMessage[]) {
    const existingIds = new Set(this.messages.map((message) => message.id));
    return messages.filter((message) => !existingIds.has(message.id));
  }

  private async _reply(id: string, response: Response) {
    // now take chunks out from dataStreamResponse and send them to the client
    return this._tryCatchChat(async () => {
      // @ts-expect-error TODO: fix this type error
      for await (const chunk of response.body!) {
        const body = decoder.decode(chunk);

        this._broadcastChatMessage({
          body,
          done: false,
          id,
          type: "cf_agent_use_chat_response"
        });
      }

      this._broadcastChatMessage({
        body: "",
        done: true,
        id,
        type: "cf_agent_use_chat_response"
      });
    });
  }

  /**
   * For the given message id, look up its associated AbortController
   * If the AbortController does not exist, create and store one in memory
   *
   * returns the AbortSignal associated with the AbortController
   */
  private _getAbortSignal(id: string): AbortSignal | undefined {
    // Defensive check, since we're coercing message types at the moment
    if (typeof id !== "string") {
      return undefined;
    }

    if (!this._chatMessageAbortControllers.has(id)) {
      this._chatMessageAbortControllers.set(id, new AbortController());
    }

    return this._chatMessageAbortControllers.get(id)?.signal;
  }

  /**
   * Remove an abort controller from the cache of pending message responses
   */
  private _removeAbortController(id: string) {
    this._chatMessageAbortControllers.delete(id);
  }

  /**
   * Propagate an abort signal for any requests associated with the given message id
   */
  private _cancelChatRequest(id: string) {
    if (this._chatMessageAbortControllers.has(id)) {
      const abortController = this._chatMessageAbortControllers.get(id);
      abortController?.abort();
    }
  }

  /**
   * Abort all pending requests and clear the cache of AbortControllers
   */
  private _destroyAbortControllers() {
    for (const controller of this._chatMessageAbortControllers.values()) {
      controller?.abort();
    }
    this._chatMessageAbortControllers.clear();
  }

  /**
   * When the DO is destroyed, cancel all pending requests
   */
  async destroy() {
    this._destroyAbortControllers();
    await super.destroy();
  }
}
